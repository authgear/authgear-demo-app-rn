name: CI

on:
  push:
    branches:
    - '*'
    - '!gh-pages'
  pull_request:
    branches:
    - '*'
    - '!gh-pages'
  workflow_dispatch: {}

jobs:
  react_native_ios:
    if: github.ref == 'refs/heads/master'
    runs-on: macos-15
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: "./.tool-versions"
    - uses: ruby/setup-ruby@v1
      with:
        # runs 'bundle install' and caches installed gems automatically
        bundler-cache: true
    - run: sudo xcode-select -s /Applications/Xcode_16.app/Contents/Developer
    - run: npm install -g appcenter-cli
    - run: npm ci
    - working-directory: ./ios
      run: bundle exec pod install
    # https://docs.github.com/en/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development
    # Start from macos 15, importing certificate without a password will always fail.
    # See https://forums.developer.apple.com/forums/thread/764429
    - name: Install the Apple certificate and provisioning profile
      env:
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
      run: |
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

        echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Set CFBundleVersion
      working-directory: ./ios
      run: |
        BUILD_NUMBER=$(date +%s)
        /usr/libexec/Plistbuddy -c "Set CFBundleVersion $BUILD_NUMBER" ./AuthgearDemoAppRN/Info.plist
    - name: Run xcodebuild archive
      working-directory: ./ios
      run: xcodebuild -workspace AuthgearDemoAppRN.xcworkspace -scheme AuthgearDemoAppRN -configuration Release -archivePath "$RUNNER_TEMP/AuthgearDemoAppRN.xcarchive" archive
    - name: Run xcodebuild -exportArchive
      working-directory: ./ios
      run: xcodebuild -exportArchive -archivePath "$RUNNER_TEMP/AuthgearDemoAppRN.xcarchive" -exportPath "$RUNNER_TEMP/AuthgearDemoAppRN.export" -exportOptionsPlist "./ExportOptions.plist"
    - name: Distribute to App Center
      env:
        APPCENTER_ACCESS_TOKEN: ${{ secrets.IOS_APPCENTER_ACCESS_TOKEN }}
      run: appcenter distribute release --debug --silent --file "$RUNNER_TEMP/AuthgearDemoAppRN.export/AuthgearDemoAppRN.ipa" --store "App Store Connect Users" --app "Oursky/Authgear-demo-app-react-native-for-sales" --release-notes "no release notes"
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  react_native_android:
    if: github.ref == 'refs/heads/master'
    runs-on: macos-15
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: "./.tool-versions"
    - uses: actions/setup-java@v4
      with:
        # The Java that comes with macos-15 is also temurin.
        distribution: "temurin"
        java-version: "17"
    - run: npm install -g appcenter-cli
    - run: npm ci
    - name: Set versionCode
      run: |
        VERSION_CODE=$(date +%s)
        sed -I "" "s/versionCode 1/versionCode $VERSION_CODE/" ./android/app/build.gradle
    - name: Build unsigned APK
      working-directory: ./android
      run: |
        java --version
        ./gradlew :app:assembleRelease
    - name: Install keystore
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        KEYSTORE_PATH=$RUNNER_TEMP/keystore.jks
        echo -n "$ANDROID_KEYSTORE_BASE64" | base64 --decode -o $KEYSTORE_PATH
    - name: Run zipalign
      run: |
        BUILD_TOOLS_VERSION=$(sed -n -E 's/.*buildToolsVersion = "(.*)"/\1/p' ./android/build.gradle)
        "$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/zipalign" -c -v 4 ./android/app/build/outputs/apk/release/app-release-unsigned.apk
    - name: Run apksigner
      env:
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      run: |
        BUILD_TOOLS_VERSION=$(sed -n -E 's/.*buildToolsVersion = "(.*)"/\1/p' ./android/build.gradle)
        "$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/apksigner" sign \
          --ks $RUNNER_TEMP/keystore.jks \
          --ks-key-alias "$ANDROID_KEY_ALIAS" \
          --ks-pass "pass:$ANDROID_KEYSTORE_PASSWORD" \
          --key-pass "pass:$ANDROID_KEY_PASSWORD" \
          --out ./android/app/build/outputs/apk/release/app-release-signed.apk \
          ./android/app/build/outputs/apk/release/app-release-unsigned.apk
    - name: Distribute to App Center
      env:
        APPCENTER_ACCESS_TOKEN: ${{ secrets.ANDROID_APPCENTER_ACCESS_TOKEN }}
      run: appcenter distribute release --debug --silent --file ./android/app/build/outputs/apk/release/app-release-signed.apk --group "Collaborators" --app "Oursky/Authgear-Demo-React-Native-Android-For-Sales" --release-notes "no release notes"
